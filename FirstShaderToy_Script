// All components are in the range [0â€¦1], including hue.
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

//The Update for the Shader to Execute
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord.xy/iResolution.xy;
   
    //Coordinate the Base of Colors
    vec3 red = vec3 (1.0, 0.1, 0.2);
    vec3 yellow = vec3(1.0, 0.8, 0.2);
    
    //Remap the range from -0.5 to 0.5
    uv -= 0.5;
    
    //Calculate the Angle of the Screen from UV.y to UV.x
    float angle =atan(uv.y, uv.x);
    //Coordinate the Base of Radius
    float radius = length(uv);
   
    //Calculate the Time when angle spins times 0.2 the speed
    angle += iTime * 0.2;


    //Calculate the Time when angle spins & The Update to Spins
    angle +=iTime;
    uv = vec2(cos(angle), sin(angle))/radius;
    
    //Apply the Texture from the First Channel called iChannel0
    fragColor = texture(iChannel0, uv);
    
    //Activate the Color Grey to the UV
    float gray = (fragColor.r + fragColor.b + fragColor.g) / 3.0;

    //Animated UV
    gray = mod(gray+iTime,0.8);
    
    //Input the FragColor rgb & Output the Code of it, the pixel color to each rgb and divide by 3.0
    fragColor.rgb = vec3(fragColor.r + fragColor.b + fragColor.g) / 3.0;
    
    float ratio = 0.5 + 0.5 * sin (iTime + uv.y * 4.0);
    
    //The Update of the FragColor.rgb using the function of hsv2rgb
    fragColor.rgb *= hsv2rgb(vec3(gray, 0.8, 0.8));

}